class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
		int val = 123456;
        
        sort(nums.begin(), nums.end());
		
		for (int i = 0; i < nums.size()-1; i++) {
			for (int j = i + 1; j < nums.size()-1; j++) {
				int tempVal = nums[i] + nums[j];
				tempVal += searchClosetNum(nums, -1 * (tempVal - target), j+1);

				val = abs(val - target) > abs(tempVal - target) ? tempVal : val;
			}
		}

		return val;
	}

	int searchClosetNum(vector<int>& nums, int target, int pos) {
		int s = pos;
		int e = nums.size() - 1;
		int p = (s + e) / 2;

		while (!(s>e)) {
			p = (s + e) / 2;

			if (nums[p] > target)		e = p - 1;
			else if (nums[p] < target)	s = p + 1;
			else						return nums[p];
		}

		int c_num = nums[p];
		if (p > 0 && p-1>=pos) c_num = abs(c_num - target) > abs(nums[p - 1] - target) ? nums[p - 1] : c_num;
		if (p+1 < nums.size())	c_num = abs(c_num - target) > abs(nums[p + 1] - target) ? nums[p + 1] : c_num;

		return c_num;
	}
};