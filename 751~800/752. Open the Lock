class Solution {
    string getNext(string str, int p, bool up){
        int temp = str[p] - '0' + (up?1:-1);
        if(temp < 0) temp = 9;
        else if(temp > 9) temp = 0;
        
        str[p] = temp+'0';
        return str;
    }
public:
    int openLock(vector<string>& deadends, string target) {
        unordered_map<string, int> m;
        unordered_set<string> s;
        queue<pair<string, int>> q;
        
        for(string str : deadends) m[str] = -1;
        
        q.push(make_pair("0000", 0));
        while(!q.empty()){
            pair<string, int> t = q.front();
            q.pop();
            if(m.find(t.first) != m.end()) continue;
            
            m[t.first] = t.second;
            if(target == t.first) break;
            for(int i=0;i<4;i++){
                string next = getNext(t.first, i, true);
                if(m.find(next) == m.end()) q.push(make_pair(next, t.second+1));
                next = getNext(t.first, i, false);
                if(m.find(next) == m.end()) q.push(make_pair(next, t.second+1));
            }
        }
        
        if(m.find(target) != m.end()) return m[target];
        return -1;
    }
};