class Solution {
    int getPos(vector<int>& d, vector<int>& c, int day){
        if(day < 1) return -1;
        int s = 0;
        int e = d.size()-1;
        int m;
        while(s<=e){
            m = (s+e)/2;
            if(d[m] == day) break;
            
            if(d[m] > day) e = m-1;
            else s = m+1;
        }
        if(d[m]>day) m--;
        return m;
    }
public:
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        vector<int> v;
        for(int i=0;i<days.size();i++){
            int p1 = getPos(days, costs, days[i]-1);
            int p2 = getPos(days, costs, days[i]-7);
            int p3 = getPos(days, costs, days[i]-30);
            int c1 = (p1==-1?0:v[p1]) + costs[0];
            int c2 = (p2==-1?0:v[p2]) + costs[1];
            int c3 = (p3==-1?0:v[p3]) + costs[2];
            
            if(c1<c2 && c1<c3) v.push_back(c1);
            else if(c2 < c3){
                while(i<days.size() && days[i]<days[p2+1]+7){
                    v.push_back(c2);
                    i++;
                }
                i--;
            }else{
                while(i<days.size() && days[i]<days[p3+1]+30){
                    v.push_back(c3);
                    i++;
                }
                i--;
            }
        }
        return v.back();
    }
};