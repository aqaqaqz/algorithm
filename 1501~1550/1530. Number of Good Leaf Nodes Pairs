/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<int> searchNode(TreeNode* n, int d, int& result, int dep){
        vector<int> l;
        vector<int> r;
        
        if(n==nullptr) return l;
        if(n->left==nullptr && n->right==nullptr){
            l.push_back(dep);
            return l;
        }
        
        l = searchNode(n->left, d, result, dep+1);
        r = searchNode(n->right, d, result, dep+1);
        for(int ld : l){
            for(int rd : r){
                if(d >= ld+rd-dep*2)
                    result++;
            }
        }
        l.insert(l.end(), r.begin(), r.end());
        return l;
    }
public:
    int countPairs(TreeNode* root, int distance) {
        int result = 0;
        searchNode(root, distance, result, 0);
        
        return result;
    }
};