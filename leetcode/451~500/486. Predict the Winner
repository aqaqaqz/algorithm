class Solution {
    vector<vector<int>> dp;
    vector<int> sumV;
    int makeDp(vector<int> &v, int s, int e){
        if(s > e) return 0;
        else if(s==e) {
            dp[s][e] = v[s];
            return 0;
        }else if(dp[s][e] != -1){
            int t = sumV[e]-(s==0?0:sumV[s-1]);
            return t - dp[s][e];
        }
        
        int t1 = v[s] + makeDp(v, s+1, e);
        int t2 = v[e] + makeDp(v, s, e-1);
        dp[s][e] = max(t1, t2);

        return makeDp(v, s, e);
    }
public:
    bool PredictTheWinner(vector<int>& nums) {
        if(nums.empty()) return true;
        dp.resize(nums.size(), vector<int>(nums.size(), -1));
        sumV.push_back(nums[0]);
        for(int i=1;i<nums.size();i++) sumV.push_back(sumV.back()+nums[i]);
        
        int val = makeDp(nums, 0, nums.size()-1);
        
        return (sumV.back()-val)>=val;
    }
};