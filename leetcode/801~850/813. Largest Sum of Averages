class Solution {
    vector<double> sum;
    vector<vector<vector<double>>> cache;
    double getAvg(int s, int e, int k){
        if(cache[s][e][k] != -1) return cache[s][e][k];
        int cnt = e-s+1;
        if(cnt==1 || k==1){
            cache[s][e][k] = (sum[e]-(s!=0?sum[s-1]:0))/cnt;
            return cache[s][e][k];
        }else if(k==cnt){
            cache[s][e][k] = sum[e]-(s!=0?sum[s-1]:0);
            return cache[s][e][k];
        }

        double temp = 0;
        for(int i=0;i<cnt-1;i++){
            int ne = s+i;
            int cnt1 = i+1;
            int cnt2 = cnt-cnt1;
            for(int g=1;g<k;g++){
                int g1 = g;
                int g2 = k-g1;
                if(cnt1>=g1 && cnt2>=g2){
                    temp = max(temp, getAvg(s, ne, g1)+getAvg(ne+1, e, g2));
                }else break;
            }
        }

        cache[s][e][k] = temp;
        return cache[s][e][k];
    }
public:
    double largestSumOfAverages(vector<int>& a, int k) {
        cache.resize(a.size(), vector<vector<double>>(a.size(), vector<double>(k+1, -1)));
        for(int i=0;i<a.size();i++){
            if(sum.empty()) sum.push_back(a[i]);
            else sum.push_back(sum.back()+a[i]);
        }
            
        return getAvg(0, a.size()-1, k);
    }
};