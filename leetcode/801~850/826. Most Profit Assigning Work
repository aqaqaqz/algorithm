class Solution {
    int getProfit(vector<pair<int, int>>& v, int w, vector<int>& maxP){
        int s = 0;
        int e = v.size()-1;
        int m;
        while(s<=e){
            m = (s+e)/2;
            if(v[m].first > w) e = m-1;
            else s = m+1;
        }
        if(v[m].first > w) m--;
        if(m < 0) return 0;
        return maxP[m];
    }
public:
    int maxProfitAssignment(vector<int>& d, vector<int>& p, vector<int>& w) {
        vector<pair<int, int>> v; //d, p
        for(int i=0;i<d.size();i++)
            v.push_back(make_pair(d[i], p[i]));
        sort(v.begin(), v.end(), [](pair<int, int>& p1, pair<int, int>& p2){
            if(p1.first == p2.first) 
                return p1.second < p2.second;
            return p1.first < p2.first;
        });
        
        vector<int> maxP;
        int temp = -1;
        for(int i=0;i<v.size();i++){
            temp = max(temp, v[i].second);
            maxP.push_back(temp);
        }
        
        
        int result = 0;
        for(int n : w){
            result += getProfit(v, n, maxP);
        }
        
        return result;
    }
};