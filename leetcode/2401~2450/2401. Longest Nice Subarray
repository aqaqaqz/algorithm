class Solution {
    vector<int> makeBit(int n){
        vector<int> v;
        while(true){
            v.push_back(n%2);
            n /= 2;
            if(n==0) break;
        }

        return v;
    }

    bool checkValid(unordered_map<int, int>& m){
        for(auto iter=m.begin();iter!=m.end();iter++){
            if(iter->second > 1) return false;
        }

        return true;
    }
public:
    int longestNiceSubarray(vector<int>& nums) {
        unordered_map<int, int> m;
        int result = 0;
        int pos = 0;
        vector<vector<int>> v;
        for(int n : nums)
            v.push_back(makeBit(n));

        for(int i=0;i<v.size();i++){
            for(int j=0;j<v[i].size();j++)
                m[j] += v[i][j];

            while(!checkValid(m)){
                for(int j=0;j<v[pos].size();j++)
                    m[j] -= v[pos][j];
                pos++;
            }

            result = max(result, i-pos+1);
        }

        return result;
    }
};