class Solution {
    int convertStringToInt(string str){
        int n = 0;

        int ten = 1;
        for(auto iter=str.rbegin();iter!=str.rend();iter++){
            n += (*iter - '0')*ten;
            ten *= 10;
        }

        return n;
    }

    int compareDay(int m1, int d1, int m2, int d2){
        if(m1 > m2) return 1;
        if(m1 < m2) return -1;
        if(d1 > d2) return 1;
        if(d1 < d2) return -1;
        return 0;
    }

    int getDay(vector<int> v){
        vector<int> days{0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        if(compareDay(v[0], v[1], v[2], v[3]) == 1) return 0;

        if(v[0] == v[2]) return (v[3]-v[1]+1);

        int day = days[v[0]] - v[1] + 1;
        for(int m=v[0]+1;m<v[2];m++)
            day += days[m];
        day += v[3];

        return day;
    }
public:
    int countDaysTogether(string arriveAlice, string leaveAlice, string arriveBob, string leaveBob) {
        vector<int> alice{
            convertStringToInt(arriveAlice.substr(0, 2)),
            convertStringToInt(arriveAlice.substr(3, 2)),
            convertStringToInt(leaveAlice.substr(0, 2)),
            convertStringToInt(leaveAlice.substr(3, 2))
        };       
        vector<int> bob{
            convertStringToInt(arriveBob.substr(0, 2)),
            convertStringToInt(arriveBob.substr(3, 2)),
            convertStringToInt(leaveBob.substr(0, 2)),
            convertStringToInt(leaveBob.substr(3, 2))
        };

        vector<int> douple;
        if(compareDay(alice[0], alice[1], bob[0], bob[1]) == 1){
            douple.push_back(alice[0]);
            douple.push_back(alice[1]);
        }else{
            douple.push_back(bob[0]);
            douple.push_back(bob[1]);
        }

        if(compareDay(alice[2], alice[3], bob[2], bob[3]) == 1){
            douple.push_back(bob[2]);
            douple.push_back(bob[3]);
        }else{
            douple.push_back(alice[2]);
            douple.push_back(alice[3]);
        }

        return getDay(douple);;
    }
};