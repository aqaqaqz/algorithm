/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        unordered_map<int, TreeNode*> m;
        list<TreeNode*> l;
        l.push_back(root);

        while(!l.empty()){
            m[m.size()+1] = l.front();
            if(l.front()->left != nullptr)
                l.push_back(l.front()->left);
            if(l.front()->right != nullptr)
                l.push_back(l.front()->right);
            l.pop_front();
        }

        int p = 2;
        while(p <= m.size()){
            int s = p;
            int e = s*2 - 1;

            while(e > s){
                int t = m[s]->val;
                m[s]->val = m[e]->val;
                m[e]->val = t;
                s++;
                e--;
            }
            p *= 4;
        }

        return root;
    }
};