class Solution {
    unordered_map<string, bool> m;
    string makeKey(int p1, int p2){
        string key = "";
        key += to_string(p1);
        key += ("," + to_string(p2));
        return key;
    }
    bool search(string& s1, string& s2, string& s3, int p1, int p2, int p3){
        if(p3==s3.size()) return true;
        string key = makeKey(p1, p2);
        if(m.find(key)!=m.end()) return m[key];

        m[key] = false;
        if(p1!=s1.size() && s1[p1]==s3[p3] && search(s1, s2, s3, p1+1, p2, p3+1)){
            m[key] = true;
            return true;
        }
        if(p2!=s2.size() && s2[p2]==s3[p3] && search(s1, s2, s3, p1, p2+1, p3+1)){
            m[key] = true;
            return true;
        }
        return false;
    }
public:
    bool isInterleave(string s1, string s2, string s3) {
        if(s1.size()+s2.size() != s3.size()) return false;
        return search(s1, s2, s3, 0, 0, 0);
    }
};