class Solution {
    int findIdx(const vector<int>& v, int val){
        if(v.empty()) return -1;
        int s = 0;
        int e = v.size()-1;
        int m;
        while(s<=e){
            m = (s+e)/2;
            if(v[m] == val) return v[m];
            else if(v[m] > val) e = m-1;
            else s = m+1;
        }
        
        while(m<v.size() && v[m]<val) m++;
        if(m >= v.size()) return -1;
        return v[m];
    }
public:
    int numMatchingSubseq(string s, vector<string>& words) {
        int result = 0;
        vector<vector<int>> v(26);
        for(int i=0;i<s.size();i++)
            v[s[i]-'a'].push_back(i);
        
        for(string str : words){
            bool success = true;
            int idx = -1;
            
            for(char c : str){
                idx = findIdx(v[c-'a'], idx);
                if(idx == -1){
                    success = false;
                    break;
                }
                idx++;
            }
            if(success) result++;
        }
        return result;        
    }
};