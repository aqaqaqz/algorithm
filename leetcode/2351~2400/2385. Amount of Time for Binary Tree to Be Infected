/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    unordered_map<int, vector<int>> m;

    void makeMap(TreeNode* n, int pre){
        if(n == nullptr) return;

        if(pre != -1)
            m[n->val].push_back(pre);

        if(n->left != nullptr)
            m[n->val].push_back(n->left->val);

        if(n->right != nullptr)
            m[n->val].push_back(n->right->val);

        makeMap(n->left, n->val);
        makeMap(n->right, n->val);
    }

    int getMin(int p, unordered_set<int>& visit){
        if(visit.find(p)!=visit.end()) return 0;

        int minute = 0;
        visit.insert(p);

        for(int n : m[p])
            minute = max(minute, getMin(n, visit));

        return minute + 1;
    }
public:
    int amountOfTime(TreeNode* root, int start) {
        makeMap(root, -1);
        
        int result = 0;
        unordered_set<int> visit;
        visit.insert(start);
        for(int n : m[start])
            result = max(result, getMin(n, visit));

        return result;
    }
};