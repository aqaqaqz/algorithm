struct CustComp {
    bool operator() (const pair<int, string>& p1, const pair<int, string>& p2) const {
        if(p1.first != p2.first) return p1.first > p2.first;
        return p1.second < p2.second;
    }
};

class FoodRatings {
    unordered_map<string, set<pair<int, string>, CustComp>> ratingMap;
    unordered_map< string, pair<set<pair<int, string>, CustComp>::iterator, string> > ratingMapIterInfo;
public:
    FoodRatings(vector<string>& foods, vector<string>& cuisines, vector<int>& ratings) {
        for(int i=0;i<foods.size();i++){
            ratingMapIterInfo[foods[i]] = make_pair(
                ratingMap[cuisines[i]].insert(make_pair(ratings[i], foods[i])).first,
                cuisines[i]
            );
        }
    }
    
    void changeRating(string food, int newRating) {
        string cuisine = ratingMapIterInfo[food].second;
        
        ratingMap[cuisine].erase(ratingMapIterInfo[food].first);
        ratingMapIterInfo[food] = make_pair(
            ratingMap[cuisine].insert(make_pair(newRating, food)).first,
            cuisine
        );
    }
    
    string highestRated(string cuisine) {
        return ratingMap[cuisine].begin()->second;
    }
};