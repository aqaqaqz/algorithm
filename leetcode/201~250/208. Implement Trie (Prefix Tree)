class Trie {
    set<string> trieSet;
    
    bool checkStartWith(string a, string b){
        if(b.size() > a.size() ) return false;
        for(int i=0;i<b.size();i++){
            if(a.at(i) != b.at(i)) return false;
        }
        return true;
    }
public:
    /** Initialize your data structure here. */
    Trie() {
        
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        trieSet.insert(word);
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        return trieSet.end()!=trieSet.find(word);
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        set<string>::iterator iter;
        for(iter=trieSet.begin();iter!=trieSet.end();iter++){
            if(checkStartWith(*iter, prefix)) return true;
        }
        return false;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * bool param_2 = obj.search(word);
 * bool param_3 = obj.startsWith(prefix);
 */