class Solution {
    long long result = 0;
    unordered_map<int, vector<int>> m;
    unordered_set<int> visit;

    int searchCost(int p, int seats){
        int cnt = 1;
        visit.insert(p);

        for(int n : m[p]){
            if(visit.find(n) != visit.end()) continue;
            
            cnt += searchCost(n, seats);
        }

        if(p != 0){
            result += cnt/seats;
            if(cnt%seats != 0) result++;
        }

        return cnt;
    }
public:
    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {        
        for(int i=0;i<roads.size();i++){
            m[roads[i][0]].push_back(roads[i][1]);
            m[roads[i][1]].push_back(roads[i][0]);
        }

        searchCost(0, seats);

        return result;
    }
};