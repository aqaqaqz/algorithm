class Solution {
    bool checkValid(int h, int w, vector<vector<int>>& grid){
        if(h>=grid.size()) return false;
        if(w>=grid[0].size()) return false;
        if(grid[h][w] != 0) return false;
        return true;
    }
    int makeKey(vector<int>& p){
        int key = p[0]*101+p[1];
        key *= 10001;
        key += p[2]*101+p[3];
        return key;
    }
public:
    int minimumMoves(vector<vector<int>>& grid) {
        vector<int> dest = {grid.size()-1, grid[0].size()-2, grid.size()-1, grid[0].size()-1};
        unordered_set<int> visit;
        vector<vector<int>> list;
        list.push_back(vector{0, 0, 0, 1});
        
        int result = 0;
        while(!list.empty()){
            vector<vector<int>> temp;
            for(vector<int> p : list){
                if(p == dest) return result;
                
                int key = makeKey(p);
                if(visit.find(key) != visit.end()) continue;
                visit.insert(key);
                
                //right
                if(checkValid(p[0], p[1]+1, grid) && checkValid(p[2], p[3]+1, grid))
                    temp.push_back(vector<int>{p[0], p[1]+1, p[2], p[3]+1});
                    
                //down
                if(checkValid(p[0]+1, p[1], grid) && checkValid(p[2]+1, p[3], grid))
                    temp.push_back(vector<int>{p[0]+1, p[1], p[2]+1, p[3]});
                
                if(p[0]==p[2]){
                    if(checkValid(p[0]+1, p[1], grid) && checkValid(p[2]+1, p[3], grid))
                        temp.push_back(vector<int>{p[0], p[1], p[0]+1, p[1]});
                }else{
                    if(checkValid(p[0], p[1]+1, grid) && checkValid(p[2], p[3]+1, grid))
                        temp.push_back(vector<int>{p[0], p[1], p[0], p[1]+1});
                }
            }
            list = temp;
            result++;
        }
        return -1;
    }
};