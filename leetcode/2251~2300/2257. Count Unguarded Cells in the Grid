class Solution {
    vector<vector<int>> dir{vector<int>{1,0}, vector<int>{0,1}, vector<int>{-1,0}, vector<int>{0,-1}};

    void visit(vector<vector<int>>& v, int h, int w, int d){
        if(h>=v.size() || h<0 || w>=v[0].size() || w<0) 
            return;
        if(v[h][w]==1 || v[h][w]==2) 
            return;
        if(v[h][w] & (4 << d))
            return;

        v[h][w] |= (4 << d);
        visit(v, h+dir[d][0], w+dir[d][1], d);
    }

    void checkGuard(int h, int w, vector<vector<int>>& v){
        if(v[h][w] != 1) return;

        for(int i=0;i<dir.size();i++)
            visit(v, h+dir[i][0], w+dir[i][1], i);
    }
public:
    int countUnguarded(int m, int n, vector<vector<int>>& guards, vector<vector<int>>& walls) {
        int result = 0;
        vector<vector<int>> v(m, vector<int>(n, 0));

        for(vector<int>& g : guards)
            v[g[0]][g[1]] = 1;
        for(vector<int>& w : walls)
            v[w[0]][w[1]] = 2;

        for(int h=0;h<m;h++)
            for(int w=0;w<n;w++)
                checkGuard(h, w, v);

        for(int h=0;h<m;h++){
            for(int w=0;w<n;w++){
                if(v[h][w] != 0) continue;
                result++;
            }
        }

        return result;
    }
};