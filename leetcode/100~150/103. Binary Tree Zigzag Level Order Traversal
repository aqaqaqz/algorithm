/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    vector<vector<int>> result;
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        result.clear();
        vector<TreeNode *> v;
        v.push_back(root);
        
        makeZigzag(v, 'l');
        
        return result;
    }
    
    void makeZigzag(vector<TreeNode *> nodeList, char dir){
        if(nodeList.size()==0) return;
        
        vector<int> tempResult;
        vector<TreeNode *> nextNodeList;
        
        for(int i=0;i<nodeList.size();i++){
            if(nodeList[i] != NULL){
                nextNodeList.push_back(nodeList[i]->left);
                nextNodeList.push_back(nodeList[i]->right);
            }
        }
        
        if(dir == 'l'){
            for(int i=0;i<nodeList.size();i++){
                if(nodeList[i] != NULL){
                    tempResult.push_back(nodeList[i]->val);
                }
            }
        }else{
            for(int i=nodeList.size()-1;i>=0;i--){
                if(nodeList[i] != NULL){
                    tempResult.push_back(nodeList[i]->val);
                }
            }
        }
        if(tempResult.size() != 0) result.push_back(tempResult);
        makeZigzag(nextNodeList, dir=='l'?'r':'l');
    }
};