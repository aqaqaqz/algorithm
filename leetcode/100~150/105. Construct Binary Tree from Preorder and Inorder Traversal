/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    map<int, int> inMap;
    int pos;
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        inMap.clear();
        pos = 0;
        
        for(int i=0;i<inorder.size();i++) inMap[inorder[i]] = i;
        
        if(preorder.size() == 0) return NULL;
        TreeNode *root = new TreeNode(preorder[pos]);
        
        int key = inMap[preorder[pos]];
        pos++;
        root->left = makeTree(preorder, inorder, 0, key-1);
        root->right = makeTree(preorder, inorder, key+1, inorder.size()-1);
        
        return root;
    }

    TreeNode* makeTree(vector<int> &preorder, vector<int> &inorder, int s, int e){
        if(s==e){
            TreeNode *node = new TreeNode(inorder[s]);
            pos++;
            return node;
        }
        if(s>e) return NULL;
        
        TreeNode *root = new TreeNode(preorder[pos]);
        int key = inMap[preorder[pos]];
        pos++;
        root->left = makeTree(preorder, inorder, s, key-1);
        root->right = makeTree(preorder, inorder, key+1, e);
        
        return root;
    }
};