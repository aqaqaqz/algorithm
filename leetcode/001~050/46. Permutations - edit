class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());
        result.push_back(nums);
        
        while(true){
            int pre = nums[0];
            for(int i=1;i<nums.size();i++){
                if(pre < nums[i]) break;
                pre = nums[i];
                if(i+1 == nums.size())
                    return result;
            }
            
            if(makeNextPermutation(nums))
                result.push_back(nums);
            else break;
        }
        
        return result;
    }
    
    bool makeNextPermutation(vector<int> &nums){
        int pos = nums.size()-1;
        if(pos == 0) return false;
        
        while(true){
            if(nums[pos] > nums[pos-1]){
                int swapPos = getPos(nums, pos, nums[pos-1]);
                swapInt(nums[swapPos], nums[pos-1]);
                reverse(nums.begin()+pos, nums.end());
                return true;
            }
            
            pos--;
            if(pos == 0) return false;
        }
    }
    
    void swapInt(int &a, int &b){
        int temp = a;
        a = b;
        b = temp;
    }
    
    int getPos(vector<int> &nums, int pos, int val){
        for(int i=pos;i<nums.size();i++){
            if(nums[i]<nums[pos] && nums[i]>val)
                pos = i;
        }
        return pos;
    }
};
