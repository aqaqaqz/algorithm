struct Node{
    Node* left;
    Node* right;
    int v;
    Node(int _v){
        left = nullptr;
        right = nullptr;
        v = _v;
    }
};

class Solution {
    void makeNode(int val, Node* n, int pos){
        if(pos == -1) return;
        int v = ((1<<pos&val)==0?0:1);
        val -= (v<<pos);
        if(v==0 && n->left==nullptr){
            n->left = new Node(v);
        }else if(v==1 && n->right==nullptr){
            n->right = new Node(v);
        }
        makeNode(val, (v==0?n->left:n->right), pos-1);
    }
    int search(Node* n1, Node* n2, int pos){
        if(n1==nullptr && n2==nullptr) return 0;
        if(pos == -1) return 0;
        if(n1==nullptr) return search(n2->left, n2->right, pos-1);
        if(n2==nullptr) return search(n1->left, n1->right, pos-1);
        
        int temp = (n1->v<<pos ^ n2->v<<pos);
        int result = 0;
        if(n1->left!=nullptr && n2->left!=nullptr && n1->right!=nullptr && n2->left!=nullptr)
            result = max(search(n1->left, n2->right, pos-1), search(n1->right, n2->left, pos-1));
        else if(n1->left!=nullptr && n2->right!=nullptr)
            result = search(n1->left, n2->right, pos-1);
        else if(n1->right!=nullptr && n2->left!=nullptr)
            result = search(n1->right, n2->left, pos-1);
        else if(n1->left!=nullptr && n2->left!=nullptr)
            result = search(n1->left, n2->left, pos-1);
        else
            result = search(n1->right, n2->right, pos-1);
        return result+temp;
    }
public:
    int findMaximumXOR(vector<int>& nums) {
        if(nums.size()<2) return 0;
        
        Node* r = new Node(-1);
        for(int n : nums) makeNode(n, r, 31);
        
        return search(r->left, r->right, 31);
    }
};