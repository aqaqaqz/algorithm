class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> result;
        set<vector<int>> s;

        sort(nums.begin(), nums.end());

        int preF;
        for(int i=0;i<nums.size();i++){
            if(i!=0 && preF==nums[i]){
                continue;
            }

            int preS;
            for(int j=i+1;j<nums.size();j++){            
                if(j!=i+1 && preS==nums[j]){
                    continue;
                }

                int tempSum = nums[i]+nums[j];
                if(findNum(nums, -1*tempSum, j+1)){
                    vector<int> tempV;
                    tempV.push_back(nums[i]);
                    tempV.push_back(nums[j]);
                    tempV.push_back(-1*tempSum);
                    pair<set<vector<int>>::iterator, bool> p = s.insert(tempV);
                    if(p.second){
                        result.push_back(tempV);
                    }
                }

                preS = nums[j];
            }
            preF = nums[i];
        }

        return result;
    }
    
    bool findNum(vector<int>& nums, int val, int pos){

        int begin = pos;
        int end = nums.size()-1;

        while(begin<=end){
            pos = (begin+end)/2;

            if(nums[pos] > val){
                end = pos-1;
            }else if(nums[pos] < val){
                begin = pos+1;
            }else{
                return true;
            }
        }

        return false;
    }
};