class MyQueue {
    stack<int> s;
    stack<int> rs;
public:
    /** Initialize your data structure here. */
    MyQueue() {
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        if(!rs.empty()){
            while(!rs.empty()){
                s.push(rs.top());
                rs.pop();
            }
        }
        s.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        if(empty()) return -1;
        if(!s.empty()){
            while(!s.empty()){
                rs.push(s.top());
                s.pop();
            }
        }
        int result = rs.top();
        rs.pop();
        return result;
    }
    
    /** Get the front element. */
    int peek() {
        if(empty()) return -1;
        if(!s.empty()){
            while(!s.empty()){
                rs.push(s.top());
                s.pop();
            }
        }
        return rs.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return s.empty() && rs.empty();   
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * bool param_4 = obj.empty();
 */