class MyStack {
    queue<int> q;
    queue<int> rq;
    bool r;
    
    void reverseQueue(queue<int> &a, queue<int> &b){
        int temp = a.front();
        a.pop();
        if(!a.empty()) reverseQueue(a, b);
        if(b.empty()) r = !r;
        b.push(temp);
    }
public:
    /** Initialize your data structure here. */
    MyStack() {
        r = false;
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        if(r) reverseQueue(rq, q);
        q.push(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int val = top();
        rq.pop();
        if(empty()) r = false;
        return val;
    }
    
    /** Get the top element. */
    int top() {
        if(!r) reverseQueue(q, rq);
	    return rq.front();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return q.empty()&&rq.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */