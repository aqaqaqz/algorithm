class Solution {
    static bool pairSort1(pair<int, int> &p1, pair<int, int> &p2){
        return p1.first<p2.first;
    }
    static bool pairSort2(pair<int, int> &p1, pair<int, int> &p2){
        return p1.second<p2.second;
    }
public:
    vector<int> advantageCount(vector<int>& a, vector<int>& b) {
        vector<int> last;
        vector<pair<int, int>> b2;
        for(int i=0;i<b.size();i++)
            b2.push_back(pair<int, int>(b[i], i));
        
        sort(a.begin(), a.end());
        sort(b2.begin(), b2.end(), pairSort1);
    
        int aPos = 0, bPos = 0;
        while(aPos != a.size()){
            if(a[aPos] > b2[bPos].first){
                b2[bPos].first = a[aPos];
                bPos++;
            }else{
                last.push_back(a[aPos]);
            }
            aPos++;
        }
        for(bPos;bPos<b2.size();bPos++)
            b2[bPos].first = -1;

        vector<int> result;
        auto lastIter = last.begin();
        sort(b2.begin(), b2.end(), pairSort2);
        for(int i=0;i<b.size();i++){
            if(b2[i].first != -1){
                result.push_back(b2[i].first);
            }else{
                result.push_back(*lastIter);
                lastIter++;
            }
        }
        return result;
    }
};