/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> allPossibleFBT(int n) {
        vector<TreeNode *> result;
        if(n == 1) {
            TreeNode *node = new TreeNode(0);
            result.push_back(node);
            return result;
        }else if(n == 3){
            TreeNode *node = new TreeNode(0);
            node->left = new TreeNode(0);
            node->right = new TreeNode(0);
            result.push_back(node);
            return result;
        }
        
        n--;
        for(int i=1;i<n;i++){
            if( i == 2 || n-i ==2) continue;
            vector<TreeNode*> left = allPossibleFBT(i);
            vector<TreeNode*> right = allPossibleFBT(n-i);
            for(int i=0;i<left.size();i++){
                for(int j=0;j<right.size();j++){
                    TreeNode *node = new TreeNode(0);
                    node->left = left[i];
                    node->right = right[j];
                    result.push_back(node);
                }
            }
        }
        
        return result;
    }
};