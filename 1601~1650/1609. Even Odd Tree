/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        unordered_map<int, int> m;
        queue<pair<TreeNode*, int>> q;
        q.push(make_pair(root, 1));
        while(!q.empty()){
            TreeNode* n = q.front().first;
            int l = q.front().second;
            q.pop();
            if(n == nullptr) continue;
            
            q.push(make_pair(n->left, l+1));
            q.push(make_pair(n->right, l+1));
            
            if(l%2 != n->val%2) return false;
            if(m.find(l) == m.end()){
                m[l] = n->val;
            }else{
                if(l%2 == 0){
                    if(m[l] <= n->val) return false;
                }else{
                    if(m[l] >= n->val) return false;
                }
                m[l] = n->val;
            }
        }
        
        return true;
    }
};