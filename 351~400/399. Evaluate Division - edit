class Solution {
    double findVal(unordered_map<string, unordered_map<string, double>> &m, unordered_map<string, int> &visit, string start, string end, bool &find){
        visit[start] = 1;
        if(m[start].find(end) != m[start].end()){
            find = true;
            return m[start][end];
        }
        for(auto iter =m[start].begin();iter!=m[start].end();iter++){
            if(visit.find(iter->first) != visit.end()) continue;
            double result = m[start][iter->first];
            double temp = findVal(m, visit, iter->first, end, find);
            if(find) return result*temp;
        }
        return -1;
    }
public:
    vector<double> calcEquation(vector<pair<string, string>> e, vector<double>& v, vector<pair<string, string>> q) {
        unordered_map<string, unordered_map<string, double>> m;
        for(int i=0;i<e.size();i++){
            pair<string, string> p = e[i];
            double val = v[i];
            m[p.first][p.second] = val;
            m[p.second][p.first] = 1/val;
        }
        
        vector<double> result;
        for(pair<string, string> p : q){
            if(p.first == p.second){
                if(m.find(p.first) != m.end()) result.push_back(1);
                else result.push_back(-1);
            }else{
                if(m[p.first].find(p.second) != m[p.first].end()){
                   result.push_back(m[p.first][p.second]);
                }else{
                    unordered_map<string, int> visit;
                    bool f = false;
                    double temp = findVal(m, visit, p.first, p.second, f);
                    if(f) result.push_back(temp);
                    else result.push_back(-1);
                }
            }
        }
                   
        return result;
    }
};