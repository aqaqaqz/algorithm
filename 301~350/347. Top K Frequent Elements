class myHeap{
public:
    bool operator() (const pair<int, int> &a, const pair<int, int> &b){
        if(a.second>b.second) return false;
        else if(a.second<b.second) return true;
        else return a.first>b.second;
    }
};

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> m;
        for(int n : nums) m[n]++;

        vector<int> result;
        priority_queue<pair<int, int>, vector<pair<int, int>>, myHeap> q;
        for(auto i=m.begin();i!=m.end();i++)
            q.push(pair<int, int>(i->first, i->second));

        for(int i=0;i<k;i++){
            result.push_back(q.top().first);
            q.pop();
        }
        
        return result;
    }
};
