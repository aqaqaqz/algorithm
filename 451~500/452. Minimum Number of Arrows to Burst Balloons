class Solution {
    static bool mySort(pair<int, int> &a, pair<int, int> &b){
        if(a.first==b.first) return a.second<b.second;
        return a.first<b.first;
    }
    bool checkBurst(const pair<int, int> &a, const pair<int, int> &b){
        if(a.first<=b.second && a.second>=b.first) return true;
        return false;
    }
public:
    int findMinArrowShots(vector<pair<int, int>>& p) {
        sort(p.begin(), p.end(), mySort);

        int result = 0;
        for(int i=0;i<p.size();i++){
            result++;
            if(i+1 < p.size() && checkBurst(p[i], p[i+1])){
                pair<int, int> temp(max(p[i].first, p[i+1].first), min(p[i].second, p[i+1].second));
                i++;
                while(i+1<p.size() && checkBurst(temp, p[i+1])){
                    temp.first = max(temp.first, p[i+1].first);
                    temp.second = min(temp.second, p[i+1].second);
                    i++;
                }
            }
        }
        
        return result;
    }
};