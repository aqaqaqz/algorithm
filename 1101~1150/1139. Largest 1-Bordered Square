class Solution {
    vector<vector<vector<int>>> v;
    vector<vector<int>> dir;
    int getLen(vector<vector<int>>& g, int h, int w, int d){
        if(h<0 || w<0 || h>=g.size() || w>=g[0].size()) return 0;
        if(g[h][w] != 1) return 0;
        if(v[h][w][d] != -1) return v[h][w][d];
        
        v[h][w][d] = getLen(g, h+dir[d][0], w+dir[d][1], d) + 1;
        return v[h][w][d];
    }
public:
    int largest1BorderedSquare(vector<vector<int>>& grid) {
        v.resize(grid.size(), vector<vector<int>>(grid[0].size(), vector<int>(4, -1)));
        dir = { {1, 0}, {0, 1}, {-1, 0}, {0, -1} };
        //d, r, u, l
        for(int h=0;h<grid.size();h++){
            for(int w=0;w<grid[0].size();w++){
                if(grid[h][w] == 1){
                    v[h][w][0] = getLen(grid, h, w, 0);
                    v[h][w][1] = getLen(grid, h, w, 1);
                    v[h][w][2] = getLen(grid, h, w, 2);
                    v[h][w][3] = getLen(grid, h, w, 3);
                }
            }
        }
        
        int maxLen = min(grid.size(), grid[0].size());
        for(int i=maxLen;i>0;i--){
            for(int h=0;h<(int)grid.size()-i+1;h++){
                for(int w=0;w<(int)grid[0].size()-i+1;w++){
                    if(v[h][w][1] >= i
                      && v[h][w+i-1][0] >=i
                      && v[h+i-1][w+i-1][3] >=i
                      && v[h+i-1][w][2] >= i) return i*i;
                }
            }
        }
        
        return 0;
    }
};