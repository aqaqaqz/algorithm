/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    void update(vector<int>& v1, vector<int>& v2){
        if(v1.empty() || v2.empty()) return;
        v1[0] = max(v1[0], v2[0]);
        v1[1] = min(v1[1], v2[1]);
        v1[2] = max(v1[2], v2[2]);
    }
    vector<int> getMaxVal(TreeNode* n){
        vector<int> v;
        if(n==NULL) return v;
        v = {0, n->val, n->val};
        vector<int> l = getMaxVal(n->left);
        vector<int> r = getMaxVal(n->right);
        update(v, l);
        update(v, r);
        v[0] = max(v[0], abs(v[1]-n->val));
        v[0] = max(v[0], abs(v[2]-n->val));
        
        return v;
    }
public:
    int maxAncestorDiff(TreeNode* root) {
        vector<int> result = getMaxVal(root);
        return result[0];
    }
};