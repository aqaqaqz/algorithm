class Solution {
	static int getWordPos(string str){
		int pos = 0;
		while(pos<str.size() && isalnum(str.at(pos))) pos++;
		while(pos<str.size() && isblank(str.at(pos))) pos++;

		return pos;
	}
	static bool myStringSort(string a, string b){
		int aPos = getWordPos(a);
		int bPos = getWordPos(b);
		
		a = a.substr(aPos, a.size()-aPos);
		b = b.substr(bPos, b.size()-bPos);
    
		for(int i=0;i<min(a.size(), b.size());i++){
            if(a.at(i) == b.at(i)) continue;
            return a.at(i) < b.at(i);
        }
        
        return a.size()>b.size()?false:true;
	}
public:
	vector<string> reorderLogFiles(vector<string>& logs) {
		vector<string> cRst;
		vector<string> dRst;

		for(string str : logs){
			int pos = getWordPos(str);
			char c = str.at(pos);
			if(isalpha(c)) cRst.push_back(str);
			else dRst.push_back(str);
		}
		
		sort(cRst.begin(), cRst.end(), myStringSort);
		for(string str : dRst) cRst.push_back(str);

		return cRst;
	}
};
